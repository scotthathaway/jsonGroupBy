// Generated by CoffeeScript 1.9.1
var createKey, getFormula, groupBy, parseFormula, testGroupBy,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

parseFormula = function(formula, formula_info) {
  var action, actions, af, data, formula_expanded, i, j, len, len1, name;
  actions = ['CountAll', 'SumAll', 'MinAll', 'MaxAll', 'AvgAll', 'Sum', 'Count', 'Min', 'Max', 'Avg'];
  for (i = 0, len = formula_info.length; i < len; i++) {
    name = formula_info[i];
    for (j = 0, len1 = actions.length; j < len1; j++) {
      action = actions[j];
      data = "data";
      if (action === "Sum" || action === "Count" || action === "Min" || action === "Max" || action === "Avg") {
        data = "gdata";
      }
      af = action + '.' + name;
      if (formula.indexOf(af) > -1) {
        formula_expanded = '(' + getFormula(af, data) + ')';
        formula = formula.replace(af, formula_expanded);
      }
    }
  }
  return formula;
};

getFormula = function(field, data) {
  var action, formula, name, parts;
  if (data == null) {
    data = '';
  }
  if (data === '') {
    data = 'data';
  }
  parts = field.split('.');
  name = parts[1];
  action = parts[0];
  if (parts.length > 2) {
    return field;
  }
  formula = (function() {
    switch (action) {
      case 'SumAll':
        data = "data";
        return "_.reduce(_.pluck(" + data + ",'" + name + "'),function(sum, num) {return parseFloat(sum) + parseFloat(num);})";
      case 'AvgAll':
        data = "data";
        return "_.reduce(_.pluck(" + data + ",'" + name + "'),function(sum, num) {return parseFloat(sum) + parseFloat(num);}) / _.size(" + data + ")";
      case 'CountAll':
        data = "data";
        return "_.chain(" + data + ").countBy('" + name + "').size().value()";
      case 'MinAll':
        data = "data";
        return "_.chain(" + data + ").pluck('" + name + "').min().value()";
      case 'MaxAll':
        data = "data";
        return "_.chain(" + data + ").pluck('" + name + "').max().value()";
      case 'Sum':
        data = "gdata";
        return "_.reduce(_.pluck(" + data + ",'" + name + "'),function(sum, num) {return parseFloat(sum) + parseFloat(num);})";
      case 'Avg':
        data = "gdata";
        return "_.reduce(_.pluck(" + data + ",'" + name + "'),function(sum, num) {return parseFloat(sum) + parseFloat(num);}) / _.size(" + data + ")";
      case 'Count':
        data = "gdata";
        return "_.chain(" + data + ").countBy('" + name + "').size().value()";
      case 'Min':
        data = "gdata";
        return "_.chain(" + data + ").pluck('" + name + "').min().value()";
      case 'Max':
        data = "gdata";
        return "_.chain(" + data + ").pluck('" + name + "').max().value()";
      default:
        return field;
    }
  })();
  return formula;
};

createKey = function(row, fields) {
  var field, i, key, len;
  key = '';
  for (i = 0, len = fields.length; i < len; i++) {
    field = fields[i];
    if (key !== '') {
      key = key + '|' + row[field];
    } else {
      key = row[field];
    }
  }
  return key;
};

groupBy = function(data, gb_fields, formula_fields, all_formula_fields) {
  var counter, field, formula, formula_data, formula_field_name, gb, gb_new, gdata, i, json, key, keys, len, parsed, row, row_id;
  if (!gb_fields.length) {
    return data;
  }
  gb = [];
  keys = [];
  gdata = data;
  for (counter in data) {
    row = data[counter];
    key = createKey(row, gb_fields);
    if (indexOf.call(keys, key) < 0) {
      keys.push(key);
      json = {};
      for (i = 0, len = gb_fields.length; i < len; i++) {
        field = gb_fields[i];
        json[field] = row[field];
      }
      gb.push(json);
    }
  }
  gb_new = gb;
  if (_.size(formula_fields) > 0) {
    gb_new = [];
    for (counter in gb) {
      row = gb[counter];
      gdata = _.where(data, row);
      json = row;
      for (row_id in formula_fields) {
        formula_data = formula_fields[row_id];
        for (formula_field_name in formula_data) {
          formula = formula_data[formula_field_name];
          parsed = parseFormula(formula, all_formula_fields);
        }
        eval("f=function(data,gdata,row){return " + parsed + "};");
        json[formula_field_name] = f(data, gdata, row);
      }
      gb_new.push(json);
    }
  }
  return gb_new;
};

testGroupBy = function() {
  var data, formula_fields, gb_data;
  data = [
    {
      'first': 'Joe',
      'last': 'Smith',
      'language': 'english',
      'occupation': 'programmer',
      'age': 45,
      'experience': 20
    }, {
      'first': 'Salle',
      'last': 'Gunner',
      'language': 'german',
      'occupation': 'programmer',
      'age': 22,
      'experience': 17
    }, {
      'first': 'Sally',
      'last': 'Jones',
      'language': 'french',
      'occupation': 'receptionist',
      'age': 36,
      'experience': 10
    }, {
      'first': 'Janie',
      'last': 'Johnson',
      'language': 'english',
      'occupation': 'factory worker',
      'age': 40,
      'experience': 22
    }, {
      'first': 'Suzie',
      'last': 'Smothers',
      'language': 'english',
      'occupation': 'programmer',
      'age': 48,
      'experience': 15
    }, {
      'first': 'Tom',
      'last': 'Jones',
      'language': 'french',
      'occupation': 'programmer',
      'age': 47,
      'experience': 12
    }
  ];
  window.data = data;
  formula_fields = [
    {
      'Experience Total': 'SumAll.experience'
    }, {
      'Experience': 'Sum.experience'
    }
  ];
  gb_data = groupBy(data, ['occupation'], formula_fields);
  console.log(gb_data);
  return true;
};
